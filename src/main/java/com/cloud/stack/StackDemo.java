package com.cloud.stack;import java.util.Stack;/** * 栈：一种特殊的线性表，其只允许在固定的一端进行插入和删除元素操作。进行数据插入和删除操作的一端称为栈顶，另一端称为栈底。 * 栈中元素遵循后进先出原则LIFO（Last In First Out）。 * @Author zhouTao * @Date 2023/2/14 */public class StackDemo {    public static void main(String[] args){        Stack<Integer> stack = new Stack<>();        push(stack);        peek(stack);        search(stack,0);        pop(stack);        pop(stack);        pop(stack);        pop(stack);    }    static void push(Stack stack){        System.out.println("stack:" + stack);        for(int i = 0; i < 3; i++){            stack.push(i);            System.out.println("push_" + i);        }        System.out.println("stack:" + stack);    }    static void pop(Stack stack){        System.out.println("-----------以下是pop操作-----------");        if (stack.empty()) {            System.out.println("Stack is empty.");        } else {            Integer a = (Integer) stack.pop();            System.out.println("pop_" + a);            System.out.println("stack: " + stack);        }    }    static void peek(Stack stack) {        System.out.println("---------以下是peek操作------------");        if (stack.empty()) {            System.out.println("Stack is empty.");        } else {            Integer a =  (Integer) stack.peek();            System.out.println("peek_" + a);            System.out.println("stack: " + stack);        }    }    static void search(Stack stack, int i) {        System.out.println("---------以下是search操作------------");        Integer index = stack.search(i);        System.out.println("index_" + index);        System.out.println("stack: " + stack);    }}